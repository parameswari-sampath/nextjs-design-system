openapi: 3.0.3
info:
  title: Authentication API
  description: API documentation for user authentication endpoints
  version: 1.0.0
  contact:
    name: Development Team
servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /api/auth/login/:
    post:
      summary: Login user and get JWT tokens
      description: Authenticate user with email and password, returns JWT access and refresh tokens
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "testuser@example.com"
                  description: "User's email address"
                password:
                  type: string
                  example: "testPassword123"
                  description: "User's password"

      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIi..."
                    description: "JWT access token"
                  refresh:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCI..."
                    description: "JWT refresh token"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "1a9f1162-b28c-4261-b8c6-3d48749f1a79"
                      email:
                        type: string
                        format: email
                        example: "testuser@example.com"
                      name:
                        type: string
                        example: "Test User"
                      role:
                        type: string
                        example: "STUDENT"

        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                empty_email:
                  summary: Empty email field
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        email: ["This field may not be blank."]
                
                missing_fields:
                  summary: Missing required fields
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        email: ["This field is required."]
                        password: ["This field is required."]

        401:
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: "AUTHENTICATION_ERROR"
                      message:
                        type: string
                        example: "Authentication required"
                      details:
                        type: object
                        properties:
                          detail:
                            type: string
                            example: "No active account found with the given credentials"
              examples:
                invalid_credentials:
                  summary: Invalid email or password
                  value:
                    error:
                      code: "AUTHENTICATION_ERROR"
                      message: "Authentication required"
                      details:
                        detail: "No active account found with the given credentials"

  /api/auth/register/:
    post:
      summary: Register a new user account
      description: Creates a new user account with email, name, role, and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
                - role
                - password
                - password_confirm
              properties:
                email:
                  type: string
                  format: email
                  example: "teacher@example.com"
                  description: "User's email address (must be unique)"
                name:
                  type: string
                  minLength: 1
                  example: "John Doe"
                  description: "User's full name"
                role:
                  type: string
                  enum: ["TEACHER", "STUDENT"]
                  example: "TEACHER"
                  description: "User's role in the system"
                password:
                  type: string
                  minLength: 8
                  example: "strongPassword123"
                  description: "User's password (minimum 8 characters)"
                password_confirm:
                  type: string
                  example: "strongPassword123"
                  description: "Password confirmation (must match password)"

      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "550e8400-e29b-41d4-a716-446655440000"
                      email:
                        type: string
                        format: email
                        example: "teacher@example.com"
                      name:
                        type: string
                        example: "John Doe"
                      role:
                        type: string
                        example: "TEACHER"
                      created_at:
                        type: string
                        format: date-time
                        example: "2024-07-20T10:30:00Z"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2024-07-20T10:30:00Z"

        400:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: "VALIDATION_ERROR"
                      message:
                        type: string
                        example: "Invalid input data"
                      details:
                        type: object
                        description: "Field-specific error messages"
                        additionalProperties:
                          type: array
                          items:
                            type: string
              examples:
                email_already_exists:
                  summary: Email already exists
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        email: ["User with this email already exists."]
                
                invalid_email_format:
                  summary: Invalid email format
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        email: ["Enter a valid email address."]
                
                missing_required_field:
                  summary: Missing required field
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        name: ["This field is required."]
                
                weak_password:
                  summary: Weak password
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        password: ["This password is too common."]
                
                invalid_role:
                  summary: Invalid role
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        role: ["\"INVALID_ROLE\" is not a valid choice."]
                
                password_mismatch:
                  summary: Password confirmation mismatch
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        password_confirm: ["Password fields didn't match."]
                
                multiple_errors:
                  summary: Multiple validation errors
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        email: ["Enter a valid email address."]
                        name: ["This field is required."]
                        password: ["This password is too common."]

        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: "INTERNAL_ERROR"
                      message:
                        type: string
                        example: "An unexpected error occurred"

  /api/auth/logout/:
    post:
      summary: Logout user and invalidate tokens
      description: Logout user and invalidate JWT tokens on the server
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: {}

      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully logged out"

        401:
          description: Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: "AUTHENTICATION_ERROR"
                      message:
                        type: string
                        example: "Authentication required"
                      details:
                        type: object
                        properties:
                          detail:
                            type: string
                            example: "Authentication credentials were not provided."

  /api/auth/profile/:
    get:
      summary: Get current user profile information
      description: Retrieve the profile information of the currently authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []

      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "550e8400-e29b-41d4-a716-446655440000"
                  email:
                    type: string
                    format: email
                    example: "teacher@example.com"
                  name:
                    type: string
                    example: "John Doe"
                  role:
                    type: string
                    enum: ["TEACHER", "STUDENT"]
                    example: "TEACHER"
                  created_at:
                    type: string
                    format: date-time
                    example: "2024-07-20T10:30:00Z"
                  updated_at:
                    type: string
                    format: date-time
                    example: "2024-07-20T10:30:00Z"

        401:
          description: Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: "AUTHENTICATION_ERROR"
                      message:
                        type: string
                        example: "Authentication required"
                      details:
                        type: object
                        properties:
                          detail:
                            type: string
                            example: "Authentication credentials were not provided."

  /api/auth/profile/update/:
    put:
      summary: Update current user profile
      description: Update the profile information of the currently authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Smith"
                  description: "User's full name"
                email:
                  type: string
                  format: email
                  example: "johnsmith@example.com"
                  description: "User's email address"

      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "550e8400-e29b-41d4-a716-446655440000"
                  email:
                    type: string
                    format: email
                    example: "johnsmith@example.com"
                  name:
                    type: string
                    example: "John Smith"
                  role:
                    type: string
                    enum: ["TEACHER", "STUDENT"]
                    example: "TEACHER"
                  created_at:
                    type: string
                    format: date-time
                    example: "2024-07-20T10:30:00Z"
                  updated_at:
                    type: string
                    format: date-time
                    example: "2024-07-20T15:45:00Z"

        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                invalid_email:
                  summary: Invalid email format
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        email: ["Enter a valid email address."]
                
                email_already_exists:
                  summary: Email already in use
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        email: ["User with this email already exists."]
                
                missing_name:
                  summary: Name is required
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Invalid input data"
                      details:
                        name: ["This field is required."]

        401:
          description: Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: "AUTHENTICATION_ERROR"
                      message:
                        type: string
                        example: "Authentication required"
                      details:
                        type: object
                        properties:
                          detail:
                            type: string
                            example: "Authentication credentials were not provided."

  /api/auth/token/refresh/:
    post:
      summary: Refresh JWT access token
      description: Generate a new access token using the refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh
              properties:
                refresh:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  description: "JWT refresh token"

      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIi..."
                    description: "New JWT access token"

        401:
          description: Invalid refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: "AUTHENTICATION_ERROR"
                      message:
                        type: string
                        example: "Authentication required"
                      details:
                        type: object
                        properties:
                          detail:
                            type: string
                            example: "Token is invalid or expired"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "Unique user identifier"
        email:
          type: string
          format: email
          description: "User's email address"
        name:
          type: string
          description: "User's full name"
        role:
          type: string
          enum: ["TEACHER", "STUDENT"]
          description: "User's role in the system"
        created_at:
          type: string
          format: date-time
          description: "Account creation timestamp"
        updated_at:
          type: string
          format: date-time
          description: "Last update timestamp"

    ValidationError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Invalid input data"
            details:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
              example:
                email: ["User with this email already exists."]
                password: ["This password is too common."]

# Common Error Cases Reference:
# 1. User already exists: {"email": ["User with this email already exists."]}
# 2. Invalid email format: {"email": ["Enter a valid email address."]}
# 3. Missing required fields: {"field_name": ["This field is required."]}
# 4. Weak password: {"password": ["This password is too common."]}
# 5. Invalid role: {"role": ["\"ROLE_NAME\" is not a valid choice."]}
# 6. Password mismatch: {"password_confirm": ["Password fields didn't match."]}
# 7. Multiple validation errors can occur simultaneously

# Frontend Error Handling Strategy:
# - Display field-specific errors under each input
# - Show general error message for unexpected errors
# - Clear errors on field change/focus
# - Disable submit button during API call
# - Show loading state during registration